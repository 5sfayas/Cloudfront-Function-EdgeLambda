AWSTemplateFormatVersion: "2010-09-09"

Description: CloudFront CDN Deployment Stack
Metadata:
  Author: Fayas Akram

Parameters:
  EnvType:
    Description: Environment type.
    Default: stage
    Type: String
    AllowedValues:
      - production
      - stage
    ConstraintDescription: must specify the environment.

Mappings: 
  EnvType:
    stage:  
      DomainName: 'stage.fayas.com'
      ACMArn: 'arn:aws:acm:us-east-1:AccountID:certificate/21342cd-62e2-45fg-98b6-12456h4fdf'
      LambdaRoleArn: 'arn:aws:iam::<AccountID>:role/redirect-edge-lambda'
    production:  
      DomainName: 'fayas.com'
      ACMArn: 'arn:aws:acm:us-east-1:AccountID:certificate/21342cd-62e2-45fg-98b6-12456h4fdf'
      LambdaRoleArn: 'arn:aws:iam::<AccountID>:role/redirect-edge-lambda'

Resources:
  # CloudFrontFunction:
  #   Type: AWS::CloudFront::Function
  #   Properties:
  #     Name: !Sub '${EnvType}-redirects function'
  #     AutoPublish: true
  #     FunctionConfig:
  #       Comment: !Sub '${EnvType}-redicts-function'
  #       Runtime: cloudfront-js-1.0
  #     FunctionCode:
  #       Fn::Sub:
  #         - |
  #           function handler(event) {
  #             var request = event.request;
              
  #             var mapping = {
  #               "/who": "https://${Domain}/fayas-akram/",
  #               "/about-me": "https://${Domain}/fayas-akram/",
  #               "/home": "https://${Domain}/",
  #               "/root": "https://${Domain}/"
  #             }
  #             var redirectURL = mapping[request.uri];

  #             if (!!redirectURL) {
  #                 var response = {
  #                     statusCode: 301,
  #                     statusDescription: 'Moved Permanently',
  #                     headers: {
  #                         'location': {
  #                             "value": redirectURL,
  #                         },
  #                         'cache-control': { "value": "max-age=3600" }
  #                     },
  #                 };
  #                 return response;
  #             }
  #             else {
  #                   return request;
  #               }
  #           }
  #         - {
  #             Domain: !FindInMap [EnvType, !Ref EnvType, DomainName]
  #           }

  RedirectEdgeLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${EnvType}-redirects-lambda'
      Handler: index.handler
      Role: !FindInMap [EnvType, !Ref EnvType, LambdaRoleArn]
      Runtime: nodejs14.x
      MemorySize: 128
      Timeout: 5
      Code:
        ZipFile:
          Fn::Sub: 
            - |
              exports.handler = (event, context, callback) => {

                let request = event.Records[0].cf.request;

                var mapping = {
                  "/who": "https://${Domain}/fayas-akram/",
                  "/about-me": "https://${Domain}/fayas-akram/",
                  "/home": "https://${Domain}/",
                  "/root": "https://${Domain}/"
                }

                var redirectURL = mapping[request.uri];

                if(!!redirectURL){
                    //Generate HTTP redirect response to a different landing page.
                    const redirectResponse = {
                        status: '301',
                        statusDescription: 'Moved Permanently',
                        headers: {
                            'location': [{
                                key: 'Location',
                                value: redirectURL,
                            }],
                            'cache-control': [{
                                key: 'Cache-Control',
                                value: "max-age=3600"
                            }],
                        },
                    };
                    callback(null, redirectResponse);
                }
                else{
                    // for all other requests proceed to fetch the resources
                    callback(null, request);
                }
              };
            - {
              Domain: !FindInMap [EnvType, !Ref EnvType, DomainName]
            }
  
  RedirectEdgeLambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !GetAtt RedirectEdgeLambda.Arn
  
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig: 
        Aliases:
          - !FindInMap [EnvType, !Ref EnvType, DomainName]
        Comment: !Sub '${EnvType}-cdn'
        Enabled: true
        HttpVersion: http2
        PriceClass: PriceClass_All
        ViewerCertificate:
          AcmCertificateArn: !FindInMap [EnvType, !Ref EnvType, ACMArn]
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        DefaultCacheBehavior:
          AllowedMethods:
            - 'GET'
            - 'HEAD'
          Compress: true
          CachePolicyId: '658327ea-f89d-4fab-a63d-7e88639e58f6'
          LambdaFunctionAssociations:
                - 
                  EventType: viewer-request
                  LambdaFunctionARN: !Join
                    - ':'
                    - - !GetAtt [RedirectEdgeLambda, Arn]
                      - !GetAtt [RedirectEdgeLambdaVersion, Version]
          # FunctionAssociations:
          #   - EventType: viewer-request
          #     FunctionARN: !GetAtt CloudFrontFunction.FunctionMetadata.FunctionARN
          SmoothStreaming: false
          TargetOriginId: !Sub '${EnvType}.s3-website-us-east-1.amazonaws.com'
          ViewerProtocolPolicy : allow-all
        Origins:
          - Id: !Sub '${EnvType}.s3-website-us-east-1.amazonaws.com'
            DomainName: !Sub '${EnvType}.s3-website-us-east-1.amazonaws.com'
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
